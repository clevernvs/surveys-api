// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// output   = "../generated/prisma"

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             Int             @id @default(autoincrement())
  title          String
  description    String
  projectTypeId  Int
  languageId     Int
  categoryId     Int
  sampleSourceId Int
  communityId    Int
  status         Boolean
  sampleSize     Int
  startDate      DateTime
  endDate        DateTime
  companyId      Int
  company        Company         @relation(fields: [companyId], references: [id])
  questionnaires Questionnaire[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Questionnaire {
  id                Int        @id @default(autoincrement())
  title             String
  filterId          Int
  randomizedAnswers Boolean @default(false)
  status            Boolean
  projectId         Int
  project           Project    @relation(fields: [projectId], references: [id])
  questions         Question[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Question {
  id              Int           @id @default(autoincrement())
  title           String
  questionTypeId  Int
  required        Boolean @default(false)
  questionnaireId Int
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  answers         Answer[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Answer {
  id               Int      @id @default(autoincrement())
  title            String
  questionId       Int
  fixed            Boolean @default(false)
  numericOrder    Int
  skiptoQuestionId Int?
  question         Question @relation(fields: [questionId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
